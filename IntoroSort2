public class IntoroSort { 
		// 정렬해야하는 실제 데이터
	private int a[]; 
		// 데이터의 요소 수 
	private int n; 
		// 크기를 초기화하는 생성자  
		// 데이터 중 
 	IntoroSort(int n) { 
     a = new int[n]; 
     this.n = 0; 
 	} 
 		// 데이터를 삽입하는 유틸리티 함수 
 	private void dataAppend(int temp) { 
     a[n] = temp; 
     n++; 
 	} 
 		// 두 요소를 바꾸는 유틸리티 함수 
 	private void swap(int i, int j) { 
     int temp = a[i]; 
     a[i] = a[j]; 
     a[j] = temp; 
 	} 
 	// i를 기반으로하는 하위 트리를 max힙하려면
 	// a[]의 색인. heapN은 힙의 크기이다.
 	private void maxHeap(int i, int heapN, int begin) { 
 		int temp = a[begin + i - 1]; 
 		int child; 
 		while (i <= heapN / 2) { 
         child = 2 * i; 
         if (child < heapN 
             && a[begin + child - 1] < a[begin + child]) 
             child++; 
         if (temp >= a[begin + child - 1]) 
             break; 

         a[begin + i - 1] = a[begin + child - 1]; 
         i = child; 
 			} 
 		a[begin + i - 1] = temp; 
 		} 

 	// 힙을 빌드하는 함수 (배열 재정비) 
 	private void heapify(int begin, int end, int heapN){ 
 		for (int i = (heapN) / 2; i >= 1; i--) 
         maxHeap(i, heapN, begin); 
 		} 

 	// 힙 정렬을 수행하는 주요 기능 
 	private void heapSort(int begin, int end){ 
     int heapN = end - begin; 

     // 힙 구축 (배열 재정렬) 
     this.heapify(begin, end, heapN); 

     // 힙에서 요소를 하나씩 추출 
     for (int i = heapN; i >= 1; i--) { 

         // 현재 루트를 끝으로 이동 
         swap(begin, begin + i); 

         // 축소된 힙에서 maxheap () 을 호출한다
         maxHeap(1, i, begin); 
     } 
 } 

 // 삽입 정렬을 구현하는 함수 
 	private void insertionSort(int left, int right) { 
     for (int i = left; i <= right; i++) { 
         int key = a[i]; 
         int j = i; 

         // arr [0..i-1]의 요소를 이동시킨다.
         // 키보다 크고 한 위치 앞으로
         // 현재위치
         while (j > left && a[j - 1] > key) { 
             a[j] = a[j - 1]; 
             j--; 
         	} 
         a[j] = key; 
     		} 
 		} 

 	// 세 요소의 중앙값을 찾기위한 함수. 
 	private int findPivot(int a1, int b1, int c1) { 
 		int max = Math.max(Math.max(a[a1], a[b1]), a[c1]); 
 		int min = Math.min(Math.min(a[a1], a[b1]), a[c1]); 
 		int median = max ^ min ^ a[a1] ^ a[b1] ^ a[c1]; 
 		if (median == a[a1]) 
 			return a1; 
 		if (median == a[b1]) 
 			return b1; 
 			return c1; 
 	} 

 	// 이 함수는 마지막 요소를 피벗 위치로 사용 한다.
 	// 욜바른 위치를 피벗 요소가 정렬 됨 
 	// 배열과 배치가 모두 작다.(피벗보다 작음)
 	// 피벗의 왼쪽
 	// 피벗 오른쪽의 더 큰 요소 
 	private int partition(int low, int high) { 

     // 피벗
     int pivot = a[high]; 

     // 더 작은 요소의 색인 
     int i = (low - 1); 
     
     for (int j = low; j <= high - 1; j++) { 

         // 현재 요소가 더 작은 경우
         // 피벗 이상 
         if (a[j] <= pivot) { 

             // 작은 요소의 인덱스 증가 
             i++; 
             swap(i, j); 
         } 
     } 
     swap(i + 1, high); 
     return (i + 1); 
 	} 

 	//Introsort를 구현하는 주요 함수 
 	// low  --> 시작 index, 
 	// high  --> 종료 index, 
 	// depthLimit  --> 재귀 수쥰 
 	private void sortDataUtil(int begin, int end, int depthLimit) { 
 		if (end - begin > 16) { 
 			if (depthLimit == 0) { 

             // 재귀 함수에 값을 초과했을시
             // 힙 정렬 실행 
             this.heapSort(begin, end); 
             return; 
         } 

         depthLimit = depthLimit - 1; 
         int pivot = findPivot(begin, 
             begin + ((end - begin) / 2) + 1, end); 
         swap(pivot, end); 

         // p 는 분할 index, 
         // arr[p] 는 이제 올바른 위치에 있다.
         int p = partition(begin, end); 

         // 전에 요소를 개별적으로 정렬 
         // partition 과 partition 후 
         sortDataUtil(begin, p - 1, depthLimit); 
         sortDataUtil(p + 1, end, depthLimit); 
     }else { 
         // 데이터 세트가 작은 경우
         // 삽입정렬을 호출 
         insertionSort(begin, end); 
     	} 
 	} 

 	// 시작하는 유틸리티 함수 
 	// Introsort module 
 	private void sortData() { 
     // depthLimit를 초기화  
     // 2*log(길이(데이터)) 
     int depthLimit 
         = (int)(2 * Math.floor(Math.log(n) / 
                               Math.log(2))); 

     this.sortDataUtil(0, n - 1, depthLimit); 
 } 

 //배열 데이터를 인쇄하는 유틸리치 함수
 private void printData() { 
     for (int i = 0; i < n; i++) 
         System.out.print(a[i] + " "); 
 } 

 //메인함수
 public static void main(String args[]) throws IOException { 
     int[] inp = { 2,3,10,48,53,45,13,49 }; 

     int n = inp.length; 
     IntoroSort introsort = new IntoroSort(n); 

     for (int i = 0; i < n; i++) { 
         introsort.dataAppend(inp[i]); 
     } 

     introsort.sortData(); 
     introsort.printData(); 
 } 
} 
